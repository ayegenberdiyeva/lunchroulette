//
//  enums.swift
//  Lunch Roulette
//
//  Created by Amina Yegenberdiyeva on 26.04.2025.
//

import Foundation

enum CuisineFilterType: String, Codable, CaseIterable, Identifiable {
    case all = "–í—Å–µ"
    case national = "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è"
    case korean = "–ö–æ—Ä–µ–π—Å–∫–∞—è"
    case japanese = "–Ø–ø–æ–Ω—Å–∫–∞—è"
    case chinese = "–ö–∏—Ç–∞–π—Å–∫–∞—è"
    case italian = "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è"
    case french = "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è"
    case turkish = "–¢—É—Ä–µ—Ü–∫–∞—è"
    
    var id : String { self.rawValue }
    
    var string: String {
        switch self {
            case .national:
                return "National"
            case .korean:
                return "Korean"
            case .japanese:
                return "Japanese"
            case.chinese:
                return "Chinese"
            case .italian:
                return "Italian"
            case .french:
                return "French"
            case .turkish:
                return "Turkish"
            default :
            return "All"
        }
    }
    
    var emoji: String {
        switch self {
            case .national:
                return "üç≤"
            case .korean:
                return "üçö"
            case .japanese:
                return "üç£"
            case .chinese:
                return "ü•°"
            case .italian:
                return "üçù"
            case .french:
                return "ü•ñ"
            case .turkish:
                return "ü•ô"
        default:
            return "üòã"
        }
    }
    
    var slug: String {
        switch self {
            case .national:
                return "National"
            case .korean:
                return "Korean"
            case .japanese:
                return "Japanese"
            case.chinese:
                return "Chinese"
            case .italian:
                return "Italian"
            case .french:
                return "French"
            case .turkish:
                return "Turkish"
            case .all:
                return ""
        }
    }
}

enum PriceRange: String, CaseIterable, Identifiable {
    case null = ""
    case low = "–ú–µ–Ω–µ–µ 5.000"
    case medium = "5.000 - 12.000"
    case high = "12.000 - 25.000"
    case luxury = "25.000 –∏ –±–æ–ª–µ–µ"
    
    var id: Self { self }
    
    var range: ClosedRange<Double> {
        switch self {
        case .low:
            return 1...5000
        case .medium:
            return 5000...12000
        case .high:
            return 12000...25000
        case .luxury:
            return 25000...Double.infinity
            default :
            return 0...Double.infinity
        }
    }
    
    var apiKey: String? {
        switch self {
        case .low: return "low"
        case .medium: return "medium"
        case .high: return "high"
        case .luxury: return "luxury"
        case .null: return nil
        }
    }

}

enum ScourceView {
    case history
    case random
}


enum NetworkError: Error, LocalizedError {
    case invalidURL
    case invalidResponse
    case serverError(statusCode: Int)
    case apiError(message: String, statusCode: Int)
    case notFound(String) // –û—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è 404
    case decodingError(Error)
    case unknown(Error)

    var errorDescription: String? {
        switch self {
        case .invalidURL: return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∑–∞–ø—Ä–æ—Å–∞."
        case .invalidResponse: return "–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞."
        case .serverError(let code): return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–∫–æ–¥: \(code)). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        case .apiError(let message, let code): return "–û—à–∏–±–∫–∞ API (–∫–æ–¥: \(code)): \(message)"
        case .notFound(let message): return message // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç API
        case .decodingError(let error): return "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: \(error.localizedDescription)"
        case .unknown(let error): return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: \(error.localizedDescription)"
        }
    }
}
